rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow other authenticated users to read user profiles (for friend requests, etc.)
      allow read: if request.auth != null;
    }

    // Friend requests - users can read their own received requests and create/update sent requests
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
    }

    // Friendships - users can read/write friendships they're part of
    match /friendships/{friendshipId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.users;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.users;
    }

    // Individual chat messages - only participants can read/write
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in chatId.split('_');
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in chatId.split('_');
    }

    // Groups - members can read, admins can write
    match /groups/{groupId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.adminId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.adminId;
    }

    // Group messages - only group members can read/write
    match /groups/{groupId}/messages/{messageId} {
      function isGroupMember() {
        return request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
      }
      
      allow read: if isGroupMember();
      allow create: if isGroupMember() && 
        request.auth.uid == request.resource.data.senderId;
      allow update, delete: if isGroupMember() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.adminId);
    }

    // Group calls - only group members can read/write
    match /groupCalls/{callId} {
      function isGroupMember() {
        return request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      }
      
      allow read, write: if isGroupMember();
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.initiator;
    }

    // Group call participants - only group members can read/write
    match /groupCalls/{callId}/participants/{participantId} {
      function isGroupMember() {
        let callData = get(/databases/$(database)/documents/groupCalls/$(callId)).data;
        return request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(callData.groupId)).data.members;
      }
      
      allow read: if isGroupMember();
      allow create: if isGroupMember() && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isGroupMember() && 
        request.auth.uid == resource.data.userId;
    }

    // Group call signals - only group members can read/write
    match /groupCalls/{callId}/signals/{signalId} {
      function isGroupMember() {
        let callData = get(/databases/$(database)/documents/groupCalls/$(callId)).data;
        return request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(callData.groupId)).data.members;
      }
      
      allow read: if isGroupMember();
      allow create: if isGroupMember() && 
        request.auth.uid == request.resource.data.from;
    }

    // Video calls - only participants can read/write
    match /calls/{callId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.caller || request.auth.uid == resource.data.callee);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.caller;
    }

    // Deny all other reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}